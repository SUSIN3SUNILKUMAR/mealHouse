
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>login</title>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

  <style>
    .error-message {
      color: red;
    }


  </style>
</head>

<body style="background: #f0f0f0">
  <div class="container" style="padding: 2%">
    <div class="row justify-content-center">
      <div class="col-md-4">
        <% if(typeof message !=='undefined' ) { %>
        <div class="alert alert-danger text-center"><%= message %></div>
        <% } %>
        <!-- <% if(typeof loginmessage !== 'undefined') { %>
                <div class="alert alert-success text-center">
                    <%= loginmessage %>
                </div>
                <% } %> -->
        <div class="card">
          <div class="card-body">
            <h1 class="text-center text-primary">Add Product</h1>
            <form action="/admin/addproduct" method="POST" enctype="multipart/form-data"   novalidate>
              
              <input type="hidden" id="fData" name="fData" />
              

              <div class="mb-3">
                <label for="productname" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="productname" name="productname" required />
                <div id="productnameError" class="error-message"></div>
              </div>
              <div class="mb-4">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category" required>
                  <option value="">Select Category</option>
                  <% if(categories.length> 0) { %> <% categories.forEach(
                    categorie=> { %>
                  <option value="<%= categorie._id %>">
                    <%= categorie.category %>
                  </option>
                  <% }); %> <% } %>
                </select>
                <div id="categoryError" class="error-message"></div>
              </div>
              <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <input type="number" class="form-control" id="price" name="price" required />
                <div id="priceError" class="error-message"></div>
              </div>

              <div class="mb-3">
                <label for="discription" class="form-label">Description</label>
                <input type="text" class="form-control" id="description" name="description" required />
                <div id="descriptionError" class="error-message"></div>
              </div>

              <!--For the image from the user-->

              <div class="mb-3">



                <div class="image-preview-container">
                  <img id="image-preview" name="nothing" src="#" alt="Image Preview" style="display: block;  max-width: 100%;" />
                </div>



                <input type="file" class="form-control" id="img" name="img" accept="image/*" required />
                <div id="imgError" class="error-message"></div>
              </div>



              <div class="mb-3">
                <label for="stock" class="form-label">Stock</label>
                <input type="number" class="form-control" id="stock" name="stock" min="1" required />
                <div id="stockError" class="error-message"></div>
              </div>
              <div class="mb-4">
                <label for="isListed" class="form-label">IsListed</label>
                <select class="form-select" id="isListed" name="isListed" required>
                  <option value="true">True</option>
                  <option value="false">False</option>
                </select>
              </div>
              <div class="text-center login-button mb-4">
                <button type="submit" class="btn btn-primary w-100">
                  Add
                </button>
                <a href="/admin/productmanagement" class="btn btn-primary w-100 mt-2">Go Back</a>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>


    function validateForm() {
      let isValid = true;
    
      const productname = document.getElementById("productname").value.trim();
      const category = document.getElementById("category").value.trim();
      const price = document.getElementById("price").value.trim();
      const description = document.getElementById("description").value.trim();
      const image = document.getElementById("img").files[0];
      const stock = document.getElementById("stock").value.trim();
    
      // Product Name validation
      if (productname === "") {
        document.getElementById("productnameError").innerText =
          "Please enter the product name";
        isValid = false;
      } else {
        document.getElementById("productnameError").innerText = "";
      }
    
      // Category validation
      if (category === "") {
        document.getElementById("categoryError").innerText =
          "Please enter the category";
        isValid = false;
      } else {
        document.getElementById("categoryError").innerText = "";
      }
    
      // Price validation
      if (price === "") {
        document.getElementById("priceError").innerText =
          "Please enter the price";
        isValid = false;
      } else if (parseInt(price) <= 0) {
        document.getElementById("priceError").innerText =
          "Price should be greater than 0";
        isValid = false;
      } else {
        document.getElementById("priceError").innerText = "";
      }
    
      // Description validation
      if (description === "") {
        document.getElementById("descriptionError").innerText =
          "Please enter the description";
        isValid = false;
      } else {
        document.getElementById("descriptionError").innerText = "";
      }
    
      // Image validation
      if (!image) {
        document.getElementById("imgError").innerText =
          "Please add the image";
        isValid = false;
      } else {
        document.getElementById("imgError").innerText = "";
      }
    
      // Stock validation
      if (stock === "") {
        document.getElementById("stockError").innerText =
          "Please add the stock";
        isValid = false;
      } else {
        document.getElementById("stockError").innerText = "";
      }
    
      return isValid;
    }

    
    
    
    </script>
    





  <script>
    window.onload = function() {
      const imagePreview = document.getElementById("image-preview");
      const imageInput = document.getElementById("img");
      let cropper;
      console.log("this is below the cropper declaratoin ... within the window.onload")

      imageInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) {
          console.log("this is the image called file: ", file);
          const reader = new FileReader();
          reader.onload = () => {
            if (cropper) {
              cropper.destroy();
            }
            imagePreview.src = reader.result;
             console.log('this is the image previedw of cropper instance', imagePreview)
            cropper = new Cropper(imagePreview, { 
            
              aspectRatio: 1, // Set the desired aspect ratio for cropping
              viewMode: 2, // Set the view mode (0: no restrictions, 1: horizontal, 2: vertical, 3: both)
              guides: true, // Show crop guides
              autoCropArea: 0.8, // Set the initial crop area size (0 to 1)
              movable: true, // Enable moving the crop box
              zoomable: true, // Enable zooming
              rotatable: true, // Enable rotation
              scalable: true, // Enable scaling
              cropBoxMovable: true, // Enable moving the crop box
              cropBoxResizable: true, // Enable resizing the crop box  
            });
          };
          
          reader.readAsDataURL(file);
        }
      });
      function getCroppedImage() {
      
      console.log("the getCroppedImage function reached");
      if (cropper) {
        console.log("inside the if condition")
        const croppedCanvas = cropper.getCroppedCanvas();
        const croppedImageData = croppedCanvas.toDataURL("image/jpeg");
        document.getElementById("fData").value = croppedImageData;
        console.log("Cropped Image Data:", croppedImageData);
        return true;
      }
      console.log("No cropper instance found.");
      return false;
    } 

    const form = document.querySelector("form");
   
   form.addEventListener("submit", (event) => {
     if (!validateForm()) {
       console.log("inside the if function") 
       event.preventDefault(); // Prevent form submission if validation fails
     } else {
       console.log("inside else function")
       if (getCroppedImage()) {
         // If image cropping is successful, proceed with form submission
         console.log("REACHED INSIDE THE GETCROPPEDIMAGE FUNCTION"); 
         return true;
       } else {
         event.preventDefault(); // Prevent form submission if image cropping fails
       }
     }
   });  
    };


  </script>






</body>

</html>
